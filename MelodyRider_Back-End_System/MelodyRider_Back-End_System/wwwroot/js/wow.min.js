/*! WOW - v1.0.2 - 2014-10-28
* Copyright (c) 2014 Matthieu Aussaguel; Licensed MIT */
(function () {
    var WOW = function () {
        function WOW(options) {
            if (!options) options = {};
            this.scrollCallback = this.scrollCallback.bind(this);
            this.scrollHandler = this.scrollHandler.bind(this);
            this.start = this.start.bind(this);
            this.scrolled = true;
            this.config = this.util().extend(options, this.defaults);
            this.animationNameCache = new this.WeakMap || new this.MozWeakMap || new this.MozWeakMap();
        }

        WOW.prototype.defaults = {
            boxClass: 'wow',
            animateClass: 'animated',
            offset: 0,
            mobile: true,
            live: true
        };

        WOW.prototype.init = function () {
            this.element = window.document.documentElement;
            var readyState = document.readyState;
            if (readyState === 'interactive' || readyState === 'complete') {
                this.start();
            } else {
                this.util().addEvent(document, 'DOMContentLoaded', this.start);
            }
            this.finished = [];
        };

        WOW.prototype.start = function () {
            this.stopped = false;
            if (this.boxes) {
                var i;
                for (i = 0; i < this.boxes.length; i++) {
                    this.applyStyle(this.boxes[i], true);
                }
            } else {
                this.boxes = this.element.querySelectorAll('.' + this.config.boxClass);
                if (this.boxes.length) {
                    for (var i = 0; i < this.boxes.length; i++) {
                        this.applyStyle(this.boxes[i], true);
                    }
                }
            }
            if (!this.disabled()) {
                this.util().addEvent(window, 'scroll', this.scrollHandler);
                this.util().addEvent(window, 'resize', this.scrollHandler);
                this.interval = setInterval(this.scrollCallback, 50);
            }
        };

        WOW.prototype.scrollCallback = function () {
            if (this.scrolled) {
                this.scrolled = false;
                var visibleBoxes = this.boxes.filter(this.isVisible.bind(this));
                for (var i = 0; i < visibleBoxes.length; i++) {
                    var box = visibleBoxes[i];
                    this.show(box);
                }
                if (!visibleBoxes.length && !this.config.live) {
                    this.stop();
                }
            }
        };

        WOW.prototype.isVisible = function (box) {
            var offset = box.getAttribute('data-wow-offset') || this.config.offset;
            var windowHeight = this.util().innerHeight();
            var scrollTop = window.pageYOffset;
            var boxTop = this.offsetTop(box);
            var boxHeight = box.clientHeight;
            var topOffset = boxTop + boxHeight - offset;
            return scrollTop >= boxTop && scrollTop <= topOffset + windowHeight;
        };

        WOW.prototype.show = function (box) {
            this.applyStyle(box);
            box.className = box.className + ' ' + this.config.animateClass;
        };

        WOW.prototype.applyStyle = function (box, hidden) {
            var duration = box.getAttribute('data-wow-duration');
            var delay = box.getAttribute('data-wow-delay');
            var iteration = box.getAttribute('data-wow-iteration');
            this.animate(function () {
                if (hidden) {
                    box.style.visibility = 'hidden';
                } else {
                    box.style.visibility = 'visible';
                }
                if (duration) {
                    box.style.animationDuration = duration;
                }
                if (delay) {
                    box.style.animationDelay = delay;
                }
                if (iteration) {
                    box.style.animationIterationCount = iteration;
                }
                box.style.animationName = hidden ? 'none' : this.cachedAnimationName(box);
            }.bind(this));
        };

        WOW.prototype.animate = (function () {
            return 'requestAnimationFrame' in window ? function (callback) {
                window.requestAnimationFrame(callback);
            } : function (callback) {
                callback();
            };
        })();

        WOW.prototype.resetStyle = function () {
            for (var i = 0; i < this.boxes.length; i++) {
                this.boxes[i].style.visibility = 'visible';
            }
        };

        WOW.prototype.disabled = function () {
            return !this.config.mobile && this.util().isMobile(navigator.userAgent);
        };

        WOW.prototype.util = function () {
            return this._util || (this._util = new WOW.Util());
        };

        WOW.prototype.offsetTop = function (element) {
            var top = element.offsetTop;
            while (element = element.offsetParent) {
                top += element.offsetTop;
            }
            return top;
        };

        WOW.prototype.util = function () {
            return this._util || (this._util = new WOW.Util());
        };

        WOW.prototype.disabled = function () {
            return !this.config.mobile && this.util().isMobile(navigator.userAgent);
        };

        return WOW;
    }();

    WOW.Util = function () {
        function Util() { }

        Util.prototype.extend = function (target, source) {
            for (var key in source) {
                if (source.hasOwnProperty(key)) {
                    target[key] = source[key];
                }
            }
            return target;
        };

        Util.prototype.isMobile = function (userAgent) {
            return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
        };

        Util.prototype.addEvent = function (element, event, handler) {
            if (element.addEventListener) {
                element.addEventListener(event, handler, false);
            } else if (element.attachEvent) {
                element.attachEvent('on' + event, handler);
            } else {
                element[event] = handler;
            }
        };

        Util.prototype.removeEvent = function (element, event, handler) {
            if (element.removeEventListener) {
                element.removeEventListener(event, handler, false);
            } else if (element.detachEvent) {
                element.detachEvent('on' + event, handler);
            } else {
                delete element[event];
            }
        };

        Util.prototype.innerHeight = function () {
            if ('innerHeight' in window) {
                return window.innerHeight;
            } else {
                return document.documentElement.clientHeight;
            }
        };

        return Util;
    }();

    new WOW().init();
})();
